* Praxis - Prayers, Readings and Fasting

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).
**Careful**, this app is still under development

** Description
This is a universal mobile app (Android and iOS) for Christians to quickly have access to their daily prayers, scripture readings, and fasting calendar. This current version contains only the Eastern Orthodox daily prayers and calendar, but I intend on adding catholic prayers later on.
** CHAT GPT HELP FOR PARSING

To streamline the process of converting text from a Word document into a JSON format for your app, you can follow these steps:

1. Automate Text Extraction
Instead of manually copying and pasting, you can use a script to extract text directly from the Word document. If you have Python installed, you can use the python-docx library to read the document.

Example Python Script:
python
Copy code
#+begin_src python
from docx import Document
import json

def extract_text_from_docx(file_path):
    document = Document(file_path)
    data = []

    for para in document.paragraphs:
        if para.style.name.startswith('Heading'):  # Check if it's a heading
            data.append({
                "type": "heading",
                "text": para.text
            })
        elif para.text.strip():  # Check if it's not empty
            data.append({
                "type": "text",
                "text": para.text
            })

    # Extract comments
    comments = document.comments
    for comment in comments:
        data.append({
            "type": "comment",
            "text": comment.text
        })

    return data

def main():
    file_path = 'your_document.docx'  # Replace with your file path
    extracted_data = extract_text_from_docx(file_path)

    # Convert to JSON
    with open('output.json', 'w') as json_file:
        json.dump(extracted_data, json_file, indent=4)

if __name__ == "__main__":
    main()
#+end_src

2. Install Required Library
You can install the python-docx library via pip:

bash
Copy code
#+begin_src bash
pip install python-docx
#+end_src

3. Run the Script
Run the script, and it will generate a JSON file (output.json) with a structured format based on headings, normal text, and comments.

4. Structure of the JSON
The resulting JSON will look something like this:

json
Copy code
#+begin_src js
[
    {
        "type": "heading",
        "text": "Heading 1"
    },
    {
        "type": "text",
        "text": "This is normal text."
    },
    {
        "type": "comment",
        "text": "This is a comment."
    }
]
#+end_src

5. Parse JSON in Your App
Once you have the JSON file, you can easily parse it in your app. Based on the type field, you can render the corresponding components:

javascript
Copy code
#+begin_src js
const renderContent = (content) => {
    return content.map((item, index) => {
        switch (item.type) {
            case 'heading':
                return <HeadingComponent key={index} text={item.text} />;
            case 'text':
                return <TextComponent key={index} text={item.text} />;
            case 'comment':
                return <CommentComponent key={index} text={item.text} />;
            default:
                return null;
        }
    });
};
#+end_src

Benefits
Time-Saving: Automating the extraction process will save you a lot of time compared to manual copying and pasting.
Consistency: The script ensures that all headings, text, and comments are consistently formatted in the JSON output.
This approach should make the process significantly quicker and more efficient. Let me know if you have any questions or need further assistance!



You said:
Wow... This is just fantastic.
ChatGPT said:
ChatGPT
I'm really glad you found it helpful! If you have any more questions or need assistance with anything else—whether it's about this project or something different—just let me know. Happy coding!

** Tasks
*** Content
**** TODO Find source of the API to see if must do my own
- So. Seems like the API is closed source and actually gets from Antiochian. Try to get direct source first.
- Probably won't be open source, so technique will be to translate
- Another method could be to generate an ical and take from that ical. Like transform the ical to jason.
- *A server will need to be set*, at least in firebase, so that I can keep either updating the ical OR, create my own API.
- Another option is having the entire liturgical logic running directly on the app.
- Basically, start with json file, turn into API with firebase, then make a code to update automatically on server.
**** TODO Make the API work in english
**** TODO Give the API a decent UI
**** TODO Translate the API by forking
**** TODO Add info page
**** TODO Add credits
**** TODO Add other prayer pages (later. Start with confession and common prayers)
**** TODO Add date picker
*** UI
**** TODO Find way to reload date
**** TODO New UI with RNRC. Two dimensional.
**** TODO Make buttons big with icons.
**** TODO Make shadows and modern UI
**** TODO [#A] Find a way to always set time to zero within the date, to always have good date
*** Extras
**** TODO Add a selection of prayer rules, or choice to build your personal. Or just a guide about prayer rules.

** Contains
- Orthodox Morning and Evening prayers
- Orthodox daily readings, life of the saints, and fasting calendar
- Languages:
  - English
  - Portuguese
- Calendars:
  - Gregorian
  - Julian

** Coming later
- Psalter
- Bible

** Get started

1. Clone git repo

2. Install dependencies

   ```bash
   npm install
   ```

3. Start the app

   ```bash
    npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).


## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the Expo community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.
